"use strict";
/**
 *
 * !!! DO NOT MODIFY THIS FILE FOR STUPID REASONS !!!
 * @author leydev
 *
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Manager = void 0;
const events_1 = require("events");
const uuid_1 = require("uuid");
class Manager extends events_1.EventEmitter {
    constructor(websocket) {
        super();
        this.websocket = websocket;
        this.websocket.on("error", (error) => console.error(error));
        this.websocket.on("connection", (socket, req) => {
            Object.assign(socket, { uuid: (0, uuid_1.v4)() });
            console.log(`\n\nâœ¨ New client: ${socket.uuid} from ${req.socket.remoteAddress}`);
            socket.on("close", () => console.log(`Client ${socket.uuid} closed conection.`));
            socket.on("message", (message) => {
                let payload = { type: "", msg: undefined };
                try {
                    payload = Manager.decodePayload(message);
                }
                catch (error) {
                    console.error(error);
                    socket.send(`Unknown command: ${message.toString()}`);
                }
                super.emit(payload.type, payload.msg, socket.uuid);
            });
        });
    }
    static decodePayload(message) {
        const payload = JSON.parse(message.toString());
        if (payload.type || payload.type && payload.msg)
            return payload;
        throw new Error(`Wrong payload. Expected {type: string, msg: any} recived: {${payload.type}, ${payload.msg}}`);
    }
    static encodePayload(data) {
        return JSON.stringify(data);
    }
    /**
     * Send a message to all connected clients
     *
     * @example
     * manager.sendBroadcast("CHANNEL", { data: "test" })
     */
    sendBroadcast(type, msg, uuid) {
        const payload = Manager.encodePayload({ type: type, msg });
        this.websocket.clients.forEach((client) => {
            if (client.uuid === uuid)
                return;
            client.send(payload);
        });
    }
    /**
     * Send a message to specific client based in UUID
     *
     * @example
     * manager.send("CHANNEL", { data: "test" }, "UUID")
     */
    send(type, msg, uuid) {
        const payload = Manager.encodePayload({ type: type, msg });
        const client = Array.from(this.websocket.clients).find((client) => client.uuid === uuid);
        if (client) {
            client.send(payload);
            return true;
        }
        return false;
    }
    /**
     * Wait for message in spacific channel
     *
     * @example
     * manager.on("CHANNEL", (context: Context, msg) => void)
     */
    on(eventName, listener) {
        const callback = (msg, uuid) => listener({
            sendBroadcast: (type, msg) => this.sendBroadcast(type, msg, uuid),
            send: (type, msg, uuid) => this.send(type, msg, uuid),
            originId: uuid
        }, msg);
        return super.on(eventName, callback);
    }
}
exports.Manager = Manager;
exports.default = Manager;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
